/** \file op_linear_gradient.cpp
 * Solid operator
 *
 * $Id: $
 */

/* Copyright, 2003 DIGITAL MURDER.
 *
 * This file is part of DIGITAL MURDER NEL.
 * DIGITAL MURDER NEL is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.

 * DIGITAL MURDER NEL is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with DIGITAL MURDER NEL; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
 * MA 02111-1307, USA.
 */

#include "stdtex_gen.h"
#include "op_linear_gradient.h"
#include "transform_float.h"

using namespace std;
using namespace NLMISC;
using namespace NLTEXGEN;

// ***************************************************************************

COpLinearGradient::COpLinearGradient()
{
	// One input
	_Inputs.push_back(CInput("offset"));

	// Parameters
	_Parameters.push_back (CParameter("mirror", "gradient", false));
	_Parameters.push_back (CParameter("tile", "gradient", true));
	_Parameters.push_back (CParameter("invert", "gradient", false));
	_Parameters.push_back (CParameter("filter", "gradient", false, 1));
	_Parameters.push_back (CParameter("scale", "gradient", ScaleSetup));
	_Parameters.push_back (CParameter("rotation", "gradient", AngleSetup));
	_Parameters.push_back (CParameter("offset", "gradient", CenteredMT1_1Setup));
	_Parameters.push_back (CParameter(CParameter::TypeGradient, "gradient", "gradient"));

	// Default gradient
	CGradientColor	black;
	CGradientColor	white;
	NLTEXGEN::copy (black.Color, ColorBlack);
	black.Pos = 0;
	NLTEXGEN::copy (white.Color, ColorWhite);
	white.Pos = 1;
	_Parameters[Gradient].Gradient.push_back (black);
	_Parameters[Gradient].Gradient.push_back (white);
	_Parameters[Scale].Value = 1;
}

// ***************************************************************************

TChannel COpLinearGradient::modifyLayer (CFloatBitmap &output, const CRenderParameter &renderParameters)
{
	const uint width = output.getWidth();
	const uint height = output.getHeight();
	const float fWidth = (float)width;
	const float fHeight = (float)height;

	// Eval the mask
	const float *offsetPixels = NULL;
	CFloatBitmap offsetBitmap;
	if (const_cast<const COpLinearGradient*>(this)->getBindedOp(OffsetInput))
	{
		evalSubOp (offsetBitmap, OffsetInput, renderParameters);
		offsetBitmap.resample (output.getWidth(), output.getHeight());
		offsetPixels = const_cast<const CFloatBitmap*>(&offsetBitmap)->getPixels();
	}

	const float scaleFactor = 1.f / _Parameters[Scale].Value;
	const float fY = -(float)sin(-_Parameters[Rotation].Value*Pi/180) * scaleFactor;
	const float fX = (float)cos(-_Parameters[Rotation].Value*Pi/180) * scaleFactor;
	const float dY = 1.f / fHeight;
	const float dX = 1.f / fWidth;
	const float offset = _Parameters[Offset].Value - 0.5f;
	const bool tile = _Parameters[Tile].Integer != 0;
	const bool invert = _Parameters[Invert].Integer != 0;
	if (output.getPixels())
	{
		// No mirror
		float *gradientPixels = new float[output.size()];

		uint x, y;
		float *dst = gradientPixels;
		float fy = -0.5f + dX / 2.f;
		for (y=0; y<height; y++, fy += dY)
		{
			float fx = -0.5f + dX / 2.f;
			for (x=0; x<width; x++, fx += dX, dst++)
			{
				float tmp = fx*fX + fy*fY - offset;
				if (offsetPixels)
				{
					tmp -= *offsetPixels;
					offsetPixels += 4;
				}
				*dst = tmp;
			}
		}

		// Gradient output
		gradient (output.getPixels(), gradientPixels, output.getWidth(), output.getHeight(), 
			_Parameters[Gradient].Gradient, 
			_Parameters[Filter].Integer!=0, 
			_Parameters[Tile].Integer!=0, 
			_Parameters[Mirror].Integer!=0, 
			_Parameters[Invert].Integer!=0, true);

		delete gradientPixels;
	}
	return ChannelRGB;
}

// ***************************************************************************

/* End of op_linear_gradient.cpp */
